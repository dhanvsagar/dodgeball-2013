(defconstant fifiksta-agent-name "SF")
(defconstant fifiksta-danger-penalty 30)
(defstructure (fifiksta 
  (:include db-agent 
    (program 'fifiksta-program)
    (body (make-fifiksta-agent))
    (name "fifiksta"))) 
 "My agent for db-world. -fifiksta")
(defstructure (fifiksta-agent (:include db-agent-body (name fifiksta-agent-name))))

(defun fifiksta-program (percept)
  (let* (
      (me (first percept))
      (grid (second percept))
      (ball-coord (find-X-location #'fifiksta-ball-p grid))
      (my-coord (find-X-location (lambda ((obj percept-object)) (equal (percept-object-name obj) (fifiksta-agent-name me))) grid))
      (holding-ball (object-contents me))
      (enemies (sort (fifiksta-find-X-location-all #'fifiksta-enemies-p grid (lambda (coords node) 
          (list coords (list (fifiksta-manhattan coords my-coord)
                             (percept-object-agent-lives node)   
                             (percept-object-agent-has-ball node)  
                             (equal (percept-object-agent-name node) "WT") 
            )))) (lambda (x y)  (< (first (second x)) (first (second y))))))
      (enemy-holding-ball (car (member-if (lambda (x) (equal (first x) ball-coord)) enemies)))
      (potential (sort 
        (fifiksta-update-potential (lambda (p c) (if (null enemy-holding-ball) (if (fifiksta-first-is-closer-than-list ball-coord c (mapcar (lambda (x) (print x)(first x)) (remove-if (lambda (x) (fourth (second x))) enemies)) 1) 0 (* fifiksta-danger-penalty (fifiksta-p (fifiksta-euklid c ball-coord)))) (* fifiksta-danger-penalty (fifiksta-p (fifiksta-euklid c (first enemy-holding-ball))))))
          (fifiksta-update-potential (lambda (p c) (fifiksta-euklid c ball-coord))
            (remove-if (lambda (x) (and (fifiksta-is-occupied-coord grid (third x)) (not (equal (first enemy-holding-ball) (third x)))))
              (list
                (list 'go-up    0 (mapcar #'+ my-coord '(0  1)))
                (list 'go-down  0 (mapcar #'+ my-coord '(0 -1)))
                (list 'go-left  0 (mapcar #'+ my-coord '(-1 0)))
                (list 'go-right 0 (mapcar #'+ my-coord '(1  0)))
                (list 'stay     1.1  my-coord)
              )))) (lambda (x y) (if (= (second x) (second y)) (string< (first x) (first y)) (< (second x) (second y) ))))))
    (cond (holding-ball (cond ((or (= (fifiksta-manhattan (first (first enemies)) my-coord) 1)
                                   (= (second (second (first enemies))) 1)) (fifiksta-throw-to (first (first enemies))))
                              ((fourth (second (first enemies))) (fifiksta-throw-to (fifikta-first-empty-adjecent grid (first (first enemies)))))
                              (T (fifiksta-throw-to (first (first enemies))))))
          ((equal ball-coord my-coord) 'grab-ball)
          (T (first (first potential))))))

(defun fifikta-first-empty-adjecent (grid pos) (some (lambda (x) (if (fifiksta-is-occupied-coord grid x) nil x)) (mapcar (lambda (x) (mapcar #'+ pos x)) '((0 1) (0 -1) (1 0) (-1 0)))))
(defun fifiksta-first-is-closer-than-list (from A lst &optional (d 2)) (every (lambda (x) (fifiksta-first-is-closer from A x d)) lst))
(defun fifiksta-first-is-closer (from A B &optional (d 2)) (>= (- (fifiksta-manhattan from B) (fifiksta-manhattan from A)) d))
(defun fifiksta-euklid (from to) (sqrt (apply #'+ (mapcar (lambda (x) (* x x)) (mapcar #'- from to)))))
(defun fifiksta-p (d) (cond ((= d 0) -1.0) ((< d 2) 1.0) ((> d 5) 0.0) (T (- 1 (* 0.1 d)))))
(defun fifiksta-manhattan (from to) (apply #'+ (mapcar #'abs (mapcar #'- from to))))
(defun fifiksta-throw-to (coord) (list 'throw-ball (first coord) (second coord)))
(defun fifiksta-is-occupied-coord (grid c) (identify-in-list #'fifiksta-ocuppied-p (aref grid (first c) (second c))))
(defun fifiksta-update-potential (fn potential) (mapcar (lambda (x) (list (first x) (+ (second x) (funcall fn (second x) (third x))) (third x))) potential))

(defmethod fifiksta-ocuppied-p ((obj percept-object))
  (if (or (and (not (equal (percept-object-name obj) "#")) 
           (not (equal (percept-object-name obj) fifiksta-agent-name)) 
           (not (equal (percept-object-name obj) "B")))
      (equal (percept-object-name obj) "#"))
  obj nil))

(defmethod fifiksta-enemies-p ((obj percept-object))
  (if (and (not (equal (percept-object-name obj) "#")) 
           (not (equal (percept-object-name obj) fifiksta-agent-name)) 
           (not (equal (percept-object-name obj) "B")))
  obj nil))

(defmethod fifiksta-ball-p ((obj percept-object))
  (if (or (and (not (equal (percept-object-name obj) "#")) 
           (not (equal (percept-object-name obj) "B"))
           (percept-object-agent-has-ball obj))
      (equal (percept-object-name obj) "B"))
  obj nil))

(defun fifiksta-find-X-location-all (X-predicate grid &optional (transform (lambda (coords node) coords)))
  (setf result '())
  (dotimes (numberx (car (array-dimensions grid)))
    (dotimes (numbery (cadr (array-dimensions grid)))
      (when (identify-in-list X-predicate (aref grid numberx numbery))
        (setf result (cons (funcall transform (list numberx numbery) (identify-in-list X-predicate (aref grid numberx numbery))) result))
      )))
  result)
